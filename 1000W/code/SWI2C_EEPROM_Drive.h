#ifndef _SWI2C_EEPROM_DRIVER_H_
#define _SWI2C_EEPROM_DRIVER_H_
//------------------------------------------------------------------------------
//#include "srMN103SFJ9D.h"
#include "user_typedefine.h"
//------------------------------------------------------------------------------
  //根据选用的EEPROM型号定义I2C_DRIVER
  //I2C_DRIVER_IS_EEP24C01：      代表 AT24C01 EEPROM
  //I2C_DRIVER_IS_EEP24C02：      代表 AT24C02 EEPROM
  //I2C_DRIVER_IS_EEP24C04：      代表 AT24C04 EEPROM
  //I2C_DRIVER_IS_EEP24C08：      代表 AT24C08 EEPROM
  //I2C_DRIVER_IS_EEP24C16：      代表 AT24C16 EEPROM
  //I2C_DRIVER_IS_EEP24C32：      代表 AT24C32 EEPROM
  //I2C_DRIVER_IS_EEP24C64：      代表 AT24C64 EEPROM
  //I2C_DRIVER_IS_EEP24C128：     代表 AT24C128 EEPROM
  //I2C_DRIVER_IS_EEP24C256：     代表 AT24C256 EEPROM
  //I2C_DRIVER_IS_EEP24C512：     代表 AT24C512 EEPROM
  //--------------------------------------
  #define I2C_DRIVER_IS_EEP24C16        //根据选用器件的不同对此定义进行修改 ,只能定义一种
  //-----------------------------------------------------------------------------------
  //根据选用的EEPROM型号和硬件连接方式定义CS_A2A1A0器件管脚位
  //对应管脚接Vcc,则相应位置1;对应管脚接Vss或无该管脚,则将对应位清
  //  |bit7 |bit6 |bit5 |bit4 |bit3 |bit2 |bit1 |bit0 |
  //  |1    |0    |1    |0    |A2   |A1   |A0   |R/W  |  AT24C01/AT24C02控制字   (片内地址 1Byte)
  //  |1    |0    |1    |0    |A2   |A1   |0    |R/W  |  AT24C04控制字           (片内地址 1Byte)
  //  |1    |0    |1    |0    |A2   |0    |0    |R/W  |  AT24C08控制字           (片内地址 1Byte)
  //  |1    |0    |1    |0    |0    |0    |0    |R/W  |  AT24C016控制字          (片内地址 1Byte)
  //  |1    |0    |1    |0    |A2   |A1   |A0   |R/W  |  AT24C32/AT24C64控制字   (片内地址 2Byte)
  //  |1    |0    |1    |0    |0    |A1   |A0   |R/W  |  AT24C128/AT24C256控制字 (片内地址 2Byte)
  //  |1    |0    |1    |0    |A2   |A1   |A0   |R/W  |  AT24C512控制字          (片内地址 2Byte)
  
  #define I2C_CS_A2A1A0   000B   //0x00 debug
//-------------------------------------------------
//重定义与I2C操作IO引脚相关的寄存器(移植时，根据选用的芯片对此处定义进行重定义)
//-------------------------------------------------
/*
  //I2C的WP方向设定位(0:输入 1：输出)  
  #define I2C_WP_DIR          PFC.PEIORL.BIT.B3

  //I2C的WP数据设定位
  //(WP为输出时，写0或1到该位，管脚输出相应电平;读，则读入该位值，与管脚无关)
  //(WP为输入时，读该位，反映管脚的相应状态;写，则写入该位，不影响管脚状态)  
  #define I2C_WP_PIN          PE.DRL.BIT.B3
  
  //I2C的SCL方向设定位(0:输入 1：输出)  
  #define I2C_SCL_DIR         PFC.PEIORL.BIT.B2

  //I2C的SCL数据设定位
  //(SCL为输出时，写0或1到该位，管脚输出相应电平;读，则读入该位值，与管脚无关)
  //(SCL为输入时，读该位，反映管脚的相应状态;写，则写入该位，不影响管脚状态)  
  #define I2C_SCL_PIN         PE.DRL.BIT.B2

  //I2C的SDA方向设定位(0:输入 1：输出)
  #define I2C_SDA_DIR         PFC.PEIORL.BIT.B1
  
  //I2C的SDA数据设定位
  //(SDA为输出时，写0或1到该位，管脚输出相应电平;读，则读入该位值，与管脚无关)
  //(SDA为输入时，读该位，反映管脚的相应状态;写，则写入该位，不影响管脚状态)   
  #define I2C_SDA_PIN         PE.DRL.BIT.B1
*/
//------------------------------------------------------------------------------  
//根据芯片的时钟周期定义5us的计数值,用于5us的延时程序
#define TIM_5US_CNT    40      //对应5us    实际为6us 
//------------------------------------------------------------------------------  
//extern const uint8_t  bit_table[8]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};  

#define     SET_BIT(varible,set_bit)    (varible|=bit_table[set_bit])
#define     CLR_BIT(varible,set_bit)    (varible&=~bit_table[set_bit])
#define     TEST_BIT(varible,set_bit)   (varible&bit_table[set_bit])
//------------------------------------------------------------------------------  
//定义I2C总线的常用操作
//#define I2C_WP_DIR            PFC.PEIORL.BIT.B3 //debug 
#define I2C_WP_OFF            //P0OUT |= 0x0004;//I2C写保护禁止，允许数据传输
#define I2C_WP_ON             //P0OUT &= 0xFFFB;//I2C写保护使能，禁止数据传输

#define I2C_SCL_OUTPUT        P2DIR |= 0x0002;//P4DIR |= 0x0001;    //SCL引脚设置为输出

#define I2C_SCL_PIN_H         P2OUT |= 0x0002;//P4OUT |= 0x0001;    //SCL引脚输出高电平
#define I2C_SCL_PIN_L         P2OUT &= 0xFFFD;//P4OUT &= 0xFFFE;    //SCL引脚输出低电平

#define I2C_SDA_OUTPUT        P2DIR |= 0x0010;//P4DIR |= 0x0002;    //SDA引脚设置为输出
#define I2C_SDA_INPUT         P2DIR &= 0xFFEF;//P4DIR &= 0xFFFD;    //SDA引脚设置为输入

#define I2C_SDA_OUTPIN_H      P2OUT |= 0x0010;//P4OUT |= 0x0002;    //SDA引脚输出高电平
#define I2C_SDA_OUTPIN_L      P2OUT &= 0xFFEF;//P4OUT &= 0xFFFD;    //SDA引脚输出低电平

#define I2C_SDA_OUTPIN        TEST_BIT(P2OUT,4)
#define I2C_SDA_INPIN         TEST_BIT(P2IN,4)

//------------------------------------------------------------------------------
//对外接口函数声明
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// *****************************************************************************
// *                                                                           *
// *  函数名称:  read_from_eeprom                                              *
// *  功能描述:  从eeprom读取字参数的程序                                      *
// *  输入参数:  byte_address  要读取字节数据的eeprom地址                      *
// *             byte_counter  要读取字节数据的个数                            *
// *             CS_A2A1A0     被读取数据的eeprom片选地址                      *
// *  输出参数:  *result    指向接收数据寄存器首地址的指针                     *
// *  函数返回值:   0：代表操作正常结束                                        *
// *                1：代表操作异常结束                                        *
// *                2：输入参数错误，溢出                                      *
// *                                                                           *
// *****************************************************************************
//------------------------------------------------------------------------------
extern uint8_t read_from_eeprom(uint8_t *result, uint16_t  byte_address,uint16_t byte_counter,const uint8_t CS_A2A1A0);
//------------------------------------------------------------------------------
// *****************************************************************************
// *                                                                           *
// *  函数名称:  write_to_eeprom                                               *
// *  功能描述:  向eeprom写入字参数的程序                                      *
// *  输入参数:  *value        指向写入eeprom的字节数据源寄存器首地址的指针    *
// *             byte_address  要写入字节数据的eeprom地址                        *
// *             byte_counter  要写入字节数据的个数                              *
// *             CS_A2A1A0     被写入数据的eeprom片选地址                      *
// *  函数返回值:   0：代表操作正常结束                                        *
// *                1：代表操作异常结束 (写入地址出错)                         *
// *                2：代表操作异常结束 (写入数据出错)                         *
// *                3：输入参数错误，溢出                                      *
// *                                                                           *
// *****************************************************************************
//------------------------------------------------------------------------------
extern uint8_t write_to_eeprom(uint8_t *value,uint16_t byte_address,uint16_t byte_counter,const uint8_t CS_A2A1A0);
//------------------------------------------------------------------------------
// *****************************************************************************
// *                                                                           *
// *  函数名称:  void delay_5us(uint16_t us_cnt)                               *
// *  功能描述:  未开中断时的延时5us的程序                                     *
// *  输入参数:  us_cnt   用于延时几个5us的计数值                              *
// *                                                                           *
// *****************************************************************************
//------------------------------------------------------------------------------
extern void delay_5us(uint16_t us_cnt);
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#endif            //end 
